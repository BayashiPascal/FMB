FUNCTION Sgn(v)
  IF 0.0 < v
    a = 1
  ELSE
    a = 0
  END IF
  IF v < 0.0
    b = 1
  ELSE
    b = 0
  END IF
  RETURN A - B
END FUNCTION

FUNCTION Neg(x)
  IF x < 0.0
    RETURN x
  ELSE
    RETURN 0.0
  END IF
END FUNCTION

FST_VAR = 0
SND_VAR = 1
THD_VAR = 2
EPSILON = 0.0000001

FUNCTION ElimVar3D(iVar, M, Y, nbRows, nbCols, Mp, Yp, nbRemainRows)
  nbRemainRows = 0 
  FOR iRow = 0..(nbRows - 2)
    FOR jRow = (iRow + 1)..(nbRows - 1)
      IF sgn(M[iRow][iVar]) <> sgn(M[jRow][iVar]) AND 
          fabs(M[iRow][iVar]) > EPSILON AND 
          fabs(M[jRow][iVar]) > EPSILON
        sumNegCoeff = 0.0 
        jCol = 0
        FOR iCol = 0..(nbCols - 1)
          IF iCol <> iVar
            Mp[nbRemainRows][jCol] = 
              M[iRow][iCol] / fabs(M[iRow][iVar]) + 
              M[jRow][iCol] / fabs(M[jRow][iVar]) 
            sumNegCoeff += neg(Mp[nbRemainRows][jCol]) 
            jCol = jCol + 1
          END IF
        END FOR
        Yp[nbRemainRows] = 
          Y[iRow] / fabs(M[iRow][iVar]) +
          Y[jRow] / fabs(M[jRow][iVar]) 
        IF Yp[nbRemainRows] < sumNegCoeff
          RETURN TRUE 
        END IF
        nbRemainRows = nbRemainRows
      END IF
    END FOR
  END FOR
  FOR iRow = 0..(nbRows - 1)
    IF fabs(M[iRow][iVar]) < EPSILON
      jCol = 0
      FOR iCol = 0..(nbCols  -1)
        IF iCol <> iVar
          Mp[nbRemainRows][jCol] = M[iRow][iCol] 
          jCol = jCol + 1
        END IF
      END FOR
      Yp[nbRemainRows] = Y[iRow] 
      nbRemainRows = nbRemainRows + 1
    END IF
  END FOR
  RETURN FALSE 
END FUNCTION

FUNCTION GetBound3D(iVar, M, Y, nbRows, bdgBox)
  bdgBox.min[iVar] = 0.0 
  bdgBox.max[iVar] = 1.0 
  FOR jRow = 0..(nbRows - 1)
    IF M[jRow][0] > EPSILON
      y = Y[jRow] / M[jRow][0] 
      IF bdgBox.max[iVar] > y
        bdgBox.max[iVar] = y 
      END IF
    ELSE IF M[jRow][0] < -EPSILON
      y = Y[jRow] / M[jRow][0]
      IF bdgBox.min[iVar] < y
        bdgBox.min[iVar] = y 
      END IF
    END IF
  END FOR
END FUNCTION

FUNCTION FMBTestIntersection3D(that, tho, bdgBox)
  Frame3DImportFrame(that, tho, thoProj) 
  M[0][0] = -thoProj.comp[0][0] 
  M[0][1] = -thoProj.comp[1][0] 
  M[0][2] = -thoProj.comp[2][0] 
  Y[0] = thoProj.orig[0] 
  IF Y[0] < neg(M[0][0]) + neg(M[0][1]) + neg(M[0][2])
    RETURN FALSE 
  END IF
  M[1][0] = -thoProj.comp[0][1] 
  M[1][1] = -thoProj.comp[1][1] 
  M[1][2] = -thoProj.comp[2][1] 
  Y[1] = thoProj.orig[1] 
  IF Y[1] < neg(M[1][0]) + neg(M[1][1]) + neg(M[1][2])
    RETURN FALSE 
  END IF
  M[2][0] = -thoProj.comp[0][2] 
  M[2][1] = -thoProj.comp[1][2] 
  M[2][2] = -thoProj.comp[2][2] 
  Y[2] = thoProj.orig[2] 
  IF Y[2] < neg(M[2][0]) + neg(M[2][1]) + neg(M[2][2])
    RETURN FALSE 
  END IF
  M[3][0] = -1.0 
  M[3][1] = 0.0 
  M[3][2] = 0.0 
  Y[3] = 0.0 
  M[4][0] = 0.0 
  M[4][1] = -1.0 
  M[4][2] = 0.0 
  Y[4] = 0.0 
  M[5][0] = 0.0 
  M[5][1] = 0.0 
  M[5][2] = -1.0 
  Y[5] = 0.0 
  nbRows = 6 
  IF that.type == FrameCuboid
    M[nbRows][0] = thoProj.comp[0][0] 
    M[nbRows][1] = thoProj.comp[1][0] 
    M[nbRows][2] = thoProj.comp[2][0] 
    Y[nbRows] = 1.0 - thoProj.orig[0] 
    IF Y[nbRows] < neg(M[nbRows][0]) + neg(M[nbRows][1]) + 
                    neg(M[nbRows][2])
      RETURN FALSE 
    END IF
    nbRows = nbRows + 1
    M[nbRows][0] = thoProj.comp[0][1] 
    M[nbRows][1] = thoProj.comp[1][1] 
    M[nbRows][2] = thoProj.comp[2][1] 
    Y[nbRows] = 1.0 - thoProj.orig[1] 
    IF Y[nbRows] < neg(M[nbRows][0]) + neg(M[nbRows][1]) + 
                    neg(M[nbRows][2])
      RETURN FALSE 
    END IF
    nbRows = nbRows + 1
    M[nbRows][0] = thoProj.comp[0][2] 
    M[nbRows][1] = thoProj.comp[1][2] 
    M[nbRows][2] = thoProj.comp[2][2] 
    Y[nbRows] = 1.0 - thoProj.orig[2] 
    IF Y[nbRows] < neg(M[nbRows][0]) + neg(M[nbRows][1]) + 
                    neg(M[nbRows][2])
      RETURN FALSE 
    END IF
    nbRows = nbRows + 1
  ELSE
    M[nbRows][0] = 
      thoProj.comp[0][0] + thoProj.comp[0][1] + thoProj.comp[0][2] 
    M[nbRows][1] = 
      thoProj.comp[1][0] + thoProj.comp[1][1] + thoProj.comp[1][2] 
    M[nbRows][2] = 
      thoProj.comp[2][0] + thoProj.comp[2][1] + thoProj.comp[2][2] 
    Y[nbRows] = 
      1.0 - thoProj.orig[0] - thoProj.orig[1] - thoProj.orig[2] 
    IF Y[nbRows] < neg(M[nbRows][0]) + neg(M[nbRows][1]) + 
                    neg(M[nbRows][2])
      RETURN FALSE 
    END IF
    nbRows = nbRows + 1
  END
  IF tho.type == FrameCuboid {
    M[nbRows][0] = 1.0 
    M[nbRows][1] = 0.0 
    M[nbRows][2] = 0.0 
    Y[nbRows] = 1.0 
    nbRows = nbRows + 1
    M[nbRows][0] = 0.0 
    M[nbRows][1] = 1.0 
    M[nbRows][2] = 0.0 
    Y[nbRows] = 1.0 
    nbRows = nbRows + 1
    M[nbRows][0] = 0.0 
    M[nbRows][1] = 0.0 
    M[nbRows][2] = 1.0 
    Y[nbRows] = 1.0 
    nbRows = nbRows + 1
  ELSE
    M[nbRows][0] = 1.0 
    M[nbRows][1] = 1.0 
    M[nbRows][2] = 1.0 
    Y[nbRows] = 1.0 
    nbRows = nbRows + 1
  END
  inconsistency = 
    ElimVar3D(FST_VAR, M, Y, nbRows, 3, Mp, Yp, nbRowsP) 
  IF inconsistency == TRUE
    RETURN FALSE 
  END
  inconsistency = 
    ElimVar3D(FST_VAR, Mp, Yp, nbRowsP, 2, Mpp, Ypp, nbRowsPP) 
  IF inconsistency == TRUE
    RETURN FALSE 
  END
  GetBound3D(THD_VAR, Mpp, Ypp, nbRowsPP, bdgBoxLocal) 
  IF bdgBoxLocal.min[THD_VAR] >= bdgBoxLocal.max[THD_VAR]
    RETURN FALSE 
  END
  ElimVar3D(SND_VAR, Mp, Yp, nbRowsP, 2, Mpp, Ypp, nbRowsPP) 
  GetBound3D(SND_VAR, Mpp, Ypp, nbRowsPP, bdgBoxLocal) 
  ElimVar3D(THD_VAR, M, Y, nbRows, 3, Mp, Yp, nbRowsP) 
  ElimVar3D( SND_VAR, Mp, Yp, nbRowsP, 2, Mpp, Ypp, nbRowsPP) 
  GetBound3D(FST_VAR, Mpp, Ypp, nbRowsPP, bdgBoxLocal) 
  bdgBox = bdgBoxLocal 
  RETURN TRUE 
END

origP3D = [0.0, 0.0, 0.0]
compP3D = [
  [1.0, 0.0, 0.0],
  [0.0, 1.0, 0.0],
  [0.0, 0.0, 1.0]]
P3D = Frame3DCreateStatic(FrameTetrahedron, origP3D, compP3D)
origQ3D = [0.5, 0.5, 0.5]
compQ3D = [
  [2.0, 0.0, 0.0],
  [0.0, 2.0, 0.0],
  [0.0, 0.0, 2.0]]
Q3D = Frame3DCreateStatic(FrameTetrahedron, origQ3D, compQ3D)
isIntersecting3D = FMBTestIntersection3D(P3D, Q3D, bdgBox3DLocal)
IF isIntersecting3D == TRUE
  PRINT "Intersection detected in AABB "
  Frame3DExportBdgBox(Q3D, bdgBox3DLocal, bdgBox3D)
  AABB3DPrint(bdgBox3D)
ELSE
  PRINT "No intersection."
END IF
