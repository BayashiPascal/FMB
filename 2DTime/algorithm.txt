ENUM FrameType
  FrameCuboid,
  FrameTetrahedron
END ENUM

STRUCT AABB2DTime
  // x,y,t
  real min[3]
  real max[3]
END STRUCT

STRUCT Frame2DTime
  FrameType type
  real orig[2]
  // comp[iComp][iAxis]
  real comp[2][2]
  AABB2DTime bdgBox
  real invComp[2][2]
  real speed[2]
END STRUCT

FUNCTION powi(base, exp)
  res = 1 
  FOR i=0 TO (exp - 1)
    res = res * base  
  END FOR
  RETURN res 
END FUNCTION

FUNCTION Frame2DTimePrint(that)
  IF that.type == FrameTetrahedron
    PRINT "T" 
  ELSE IF that.type == FrameCuboid
    PRINT "C" 
  END IF
  PRINT "o(" 
  FOR i = 0 TO 1
    PRINT that.orig[i] 
    IF i < 1
      PRINT "," 
    END IF
  END FOR
  PRINT ") s(" 
  FOR i = 0 TO 1
    PRINT that.speed[i]
    IF i < 1
      PRINT "," 
    END IF
  END FOR
  comp = ["x", "y"]
  FOR j = 0 TO 1
    PRINT ") ", comp[j], "(" 
    FOR i = 0 TO 1
      PRINT that.comp[j][i]
      IF i < 1
        PRINT ","
      END IF
    END FOR
  END FOR
  PRINT ")" 
END FUNCTION

FUNCTION AABB2DTimePrint(that)
  PRINT "minXYT(" 
  FOR i = 0 TO 2
    PRINT that.min[i]
    IF i < 2
      PRINT "," 
    END IF
  END FOR
  PRINT ")-maxXYT(" 
  FOR i = 0 TO 2
    PRINT that.max[i] 
    IF i < 2
      PRINT "," 
    END IF
  END FOR
  PRINT ")" 
END FUNCTION

FUNCTION Frame2DTimeExportBdgBox(that, bdgBox, bdgBoxProj)
  bdgBoxProj.min[2] = bdgBox.min[2] 
  bdgBoxProj.max[2] = bdgBox.max[2] 
  FOR i = 0 TO 1
    bdgBoxProj.max[i] = that.orig[i] + that.speed[i] * bdgBox.min[2] 
    FOR j = 0 TO 1
      bdgBoxProj.max[i] = 
        bdgBoxProj.max[i] + that.comp[j][i] * bdgBox.min[j] 
    END FOR
    bdgBoxProj.min[i] = bdgBoxProj.max[i] 
  END FOR
  nbVertices = powi(2, 2) 
  FOR iVertex = 1 TO (nbVertices - 1) 
    FOR i = 0 TO 1
      IF BITWISEAND(iVertex, powi(2, i)) <> 0
        v[i] = bdgBox.max[i]
      ELSE
        v[i] = bdgBox.min[i]
      END IF
    END FOR
    FOR i = 0 TO 1
      w[i] = that.orig[i] 
      FOR j = 0 TO 1
        w[i] = w[i] + that.comp[j][i] * v[j] 
      END FOR
    END FOR
    FOR i = 0 TO 1
      IF bdgBoxProj.min[i] > w[i] + that.speed[i] * bdgBox.min[2]
        bdgBoxProj.min[i] = w[i] + that.speed[i] * bdgBox.min[2] 
      END IF
      IF bdgBoxProj.min[i] > w[i] + that.speed[i] * bdgBox.max[2]
        bdgBoxProj.min[i] = w[i] + that.speed[i] * bdgBox.max[2] 
      END IF
      IF bdgBoxProj.max[i] < w[i] + that.speed[i] * bdgBox.min[2]
        bdgBoxProj.max[i] = w[i] + that.speed[i] * bdgBox.min[2] 
      END IF
      IF bdgBoxProj.max[i] < w[i] + that.speed[i] * bdgBox.max[2]
        bdgBoxProj.max[i] = w[i] + that.speed[i] * bdgBox.max[2] 
      END IF
    END FOR
  END FOR
END FUNCTION

FUNCTION Frame2DTimeImPortFrame(P, Q, Qp)
  FOR i = 0 TO 1
    v[i] = Q.orig[i] - P.orig[i] 
    s[i] = Q.speed[i] - P.speed[i] 
  END FOR
  FOR i = 0 TO 1
    Qp.orig[i] = 0.0 
    Qp.speed[i] = 0.0 
    FOR j = 0 TO 1
      Qp.orig[i] = Qp.orig[i] + P.invComp[j][i] * v[j] 
      Qp.speed[i] = Qp.speed[i] + P.invComp[j][i] * s[j] 
      Qp.comp[j][i] = 0.0 
      FOR k = 0 TO 1
        Qp.comp[j][i] = Qp.comp[j][i] + P.invComp[k][i] * Q.comp[j][k] 
      END FOR
    END FOR
  END FOR
END FUNCTION

FUNCTION Frame2DTimeUpdateInv(that)
  det = that.comp[0][0] * that.comp[1][1] - 
    that.comp[1][0] * that.comp[0][1] 
  that.invComp[0][0] = that.comp[1][1] / det 
  that.invComp[0][1] = -that.comp[0][1] / det 
  that.invComp[1][0] = -that.comp[1][0] / det 
  that.invComp[1][1] = that.comp[0][0] / det 
END FUNCTION

FUNCTION Frame2DTimeCreateStatic(type, orig, comp)
  that.type = type 
  FOR iAxis = 0 TO 1
    that.orig[iAxis] = orig[iAxis] 
    that.speed[iAxis] = speed[iAxis] 
    FOR iComp = 0 TO 1
      that.comp[iComp][iAxis] = comp[iComp][iAxis] 
    END FOR
  END FOR
  FOR iAxis = 0 TO 1
    min = orig[iAxis] 
    max = orig[iAxis] 
    FOR iComp = 0 TO 1
      IF that.type == FrameCuboid
        IF that.comp[iComp][iAxis] < 0.0
          min = min + that.comp[iComp][iAxis] 
        END IF
        IF that.comp[iComp][iAxis] > 0.0
          max = max + that.comp[iComp][iAxis] 
        END IF
      ELSE IF that.type == FrameTetrahedron
        IF that.comp[iComp][iAxis] < 0.0 AND
          min > orig[iAxis] + that.comp[iComp][iAxis]
          min = orig[iAxis] + that.comp[iComp][iAxis] 
        END IF
        IF that.comp[iComp][iAxis] > 0.0 AND
          max < orig[iAxis] + that.comp[iComp][iAxis]
          max = orig[iAxis] + that.comp[iComp][iAxis] 
        END IF
      END IF
    END FOR
    IF that.speed[iAxis] < 0.0
      min = min + that.speed[iAxis] 
    END IF
    IF that.speed[iAxis] > 0.0
      max = max + that.speed[iAxis] 
    END IF
    that.bdgBox.min[iAxis] = min 
    that.bdgBox.max[iAxis] = max 
  END FOR
  that.bdgBox.min[2] = 0.0 
  that.bdgBox.max[2] = 1.0 
  Frame2DTimeUpdateInv(that) 
  RETURN that 
END FUNCTION

FUNCTION Sgn(v)
  IF 0.0 < v
    a = 1
  ELSE
    a = 0
  END IF
  IF v < 0.0
    b = 1
  ELSE
    b = 0
  END IF
  RETURN A - B
END FUNCTION

FUNCTION Neg(x)
  IF x < 0.0
    RETURN x
  ELSE
    RETURN 0.0
  END IF
END FUNCTION

FST_VAR = 0
SND_VAR = 1
THD_VAR = 2

FUNCTION ElimVar2DTime(M, Y, nbRows, nbCols, Mp, Yp, nbRemainRows)
  nbRemainRows = 0 
  FOR iRow = 0 TO (nbRows - 2)
    IF M[iRow][0] <> 0.0
      FOR jRow = (iRow + 1) TO (nbRows - 1)
        IF sgn(M[iRow][0]) <> sgn(M[jRow][0]) AND 
            M[jRow][0] <> 0.0
          sumNegCoeff = 0.0 
          jCol = 0
          FOR iCol = 1 TO (nbCols - 1)
            Mp[nbRemainRows][jCol] = 
              M[iRow][iCol] / ABS(M[iRow][0]) + 
              M[jRow][iCol] / ABS(M[jRow][0]) 
            sumNegCoeff = sumNegCoeff + neg(Mp[nbRemainRows][jCol]) 
            jCol = jCol + 1 
          END FOR
          Yp[nbRemainRows] = 
            Y[iRow] / ABS(M[iRow][0]) +
            Y[jRow] / ABS(M[jRow][0]) 
          IF Yp[nbRemainRows] < sumNegCoeff
            RETURN TRUE 
          END IF
          nbRemainRows = nbRemainRows + 1 
        END IF
      END FOR
    END IF
  END FOR
  FOR iRow = 0 TO (nbRows - 1)
    IF M[iRow][0] == 0.0
      jCol = 0
      FOR iCol = 1 TO (nbCols - 1)
        Mp[nbRemainRows][jCol] = M[iRow][iCol] 
        jCol = jCol + 1
      END FOR
      Yp[nbRemainRows] = Y[iRow] 
      nbRemainRows = nbRemainRows + 1 
    END IF
  END FOR
  RETURN FALSE 
END FUNCTION

FUNCTION GetBoundLastVar2DTime(iVar, M, Y, nbRows, bdgBox)
  bdgBox.min[iVar] = 0.0 
  bdgBox.max[iVar] = 1.0 
  FOR jRow = 0 TO (nbRows - 1)
    IF M[jRow][0] > 0.0
      y = Y[jRow] / M[jRow][0] 
      IF bdgBox.max[iVar] > y
        bdgBox.max[iVar] = y 
      END IF
    ELSE IF M[jRow][0] < 0.0
      y = Y[jRow] / M[jRow][0] 
      IF bdgBox.min[iVar] < y
        bdgBox.min[iVar] = y 
      END IF
    END IF
  END FOR
END FUNCTION

FUNCTION GetBoundVar2DTime(iVar, M, Y, nbRows, nbCols, bdgBox)
  bdgBox.min[iVar] = 0.0
  bdgBox.max[iVar] = 1.0
  FOR iRow = 0 .. TO (nbRows - 1)
    IF M[iRow][0] <> 0.0
      min = -1.0 * Y[iRow]
      max = Y[iRow]
      FOR iCol = 1 .. TO (nbCols - 1)
        IF M[iRow][iCol] > 0.0
          min = min + M[iRow][iCol] * bdgBox.min[iCol + iVar]
          max = max - M[iRow][iCol] * bdgBox.min[iCol + iVar]
        ELSE IF M[iRow][iCol] < 0.0
          min = min + M[iRow][iCol] * bdgBox.max[iCol + iVar]
          max = max - M[iRow][iCol] * bdgBox.max[iCol + iVar]
        END IF
      END FOR
      min = min / (-1.0 * M[iRow][0])
      max = max / M[iRow][0]
      IF bdgBox.min[iVar] > min
        bdgBox.min[iVar] = min
      END IF
      IF bdgBox.max[iVar] < max
        bdgBox.max[iVar] = max
      END IF
    END IF
  END FOR
END FUNCTION

FUNCTION FMBTestIntersection2DTime(that, tho, bdgBox)
  Frame2DTimeImportFrame(that, tho, thoProj) 
  M[0][0] = -thoProj.comp[0][0] 
  M[0][1] = -thoProj.comp[1][0] 
  M[0][2] = -thoProj.speed[0] 
  Y[0] = thoProj.orig[0] 
  IF (Y[0] < neg(M[0][0]) + neg(M[0][1]) + neg(M[0][2]))
    RETURN FALSE 
  END IF
  M[1][0] = -thoProj.comp[0][1] 
  M[1][1] = -thoProj.comp[1][1] 
  M[1][2] = -thoProj.speed[1] 
  Y[1] = thoProj.orig[1] 
  IF (Y[1] < neg(M[1][0]) + neg(M[1][1]) + neg(M[1][2]))
    RETURN FALSE 
  END IF
  nbRows = 2
  IF that.type == FrameCuboid
    M[nbRows][0] = thoProj.comp[0][0] 
    M[nbRows][1] = thoProj.comp[1][0] 
    M[nbRows][2] = thoProj.speed[0] 
    Y[nbRows] = 1.0 - thoProj.orig[0] 
    IF Y[nbRows] < neg(M[nbRows][0]) + neg(M[nbRows][1]) + 
                    neg(M[nbRows][2])
      RETURN FALSE 
    END IF
    nbRows = nbRows + 1
    M[nbRows][0] = thoProj.comp[0][1] 
    M[nbRows][1] = thoProj.comp[1][1] 
    M[nbRows][2] = thoProj.speed[1] 
    Y[nbRows] = 1.0 - thoProj.orig[1] 
    IF Y[nbRows] < neg(M[nbRows][0]) + neg(M[nbRows][1]) + 
                    neg(M[nbRows][2])
      RETURN FALSE 
    END IF
    nbRows = nbRows + 1
  ELSE
    M[nbRows][0] = thoProj.comp[0][0] + thoProj.comp[0][1] 
    M[nbRows][1] = thoProj.comp[1][0] + thoProj.comp[1][1] 
    M[nbRows][2] = thoProj.speed[0] + thoProj.speed[1] 
    Y[nbRows] = 1.0 - thoProj.orig[0] - thoProj.orig[1] 
    IF Y[nbRows] < neg(M[nbRows][0]) + neg(M[nbRows][1]) + 
                    neg(M[nbRows][2])
      RETURN FALSE 
    END IF
    nbRows = nbRows + 1
  END IF
  IF tho.type == FrameCuboid
    M[nbRows][0] = 1.0 
    M[nbRows][1] = 0.0 
    M[nbRows][2] = 0.0 
    Y[nbRows] = 1.0 
    nbRows = nbRows + 1
    M[nbRows][0] = 0.0 
    M[nbRows][1] = 1.0 
    M[nbRows][2] = 0.0 
    Y[nbRows] = 1.0 
    nbRows = nbRows + 1
  ELSE
    M[nbRows][0] = 1.0 
    M[nbRows][1] = 1.0 
    M[nbRows][2] = 0.0 
    Y[nbRows] = 1.0 
    nbRows = nbRows + 1
  END IF
  M[nbRows][0] = -1.0 
  M[nbRows][1] = 0.0 
  M[nbRows][2] = 0.0 
  Y[nbRows] = 0.0 
  nbRows = nbRows + 1
  M[nbRows][0] = 0.0 
  M[nbRows][1] = -1.0 
  M[nbRows][2] = 0.0 
  Y[nbRows] = 0.0 
  nbRows = nbRows + 1
  M[nbRows][0] = 0.0 
  M[nbRows][1] = 0.0 
  M[nbRows][2] = 1.0 
  Y[nbRows] = 1.0 
  nbRows = nbRows + 1
  M[nbRows][0] = 0.0 
  M[nbRows][1] = 0.0 
  M[nbRows][2] = -1.0 
  Y[nbRows] = 0.0 
  nbRows = nbRows + 1
  inconsistency = 
    ElimVar2DTime(M, Y, nbRows, 3, Mp, Yp, nbRowsP) 
  IF inconsistency == TRUE
    RETURN FALSE 
  END IF
  inconsistency = 
    ElimVar2DTime(Mp, Yp, nbRowsP, 2, Mpp, Ypp, nbRowsPP) 
  IF inconsistency == TRUE
    RETURN FALSE 
  END IF
  GetBoundLastVar2DTime(THD_VAR, Mpp, Ypp, nbRowsPP, bdgBoxLocal) 
  IF bdgBoxLocal.min[THD_VAR] >= bdgBoxLocal.max[THD_VAR]
    RETURN FALSE 
  ELSE
    GetBoundVar2DTime(SND_VAR, Mp, Yp, nbRowsP, 2, bdgBoxLocal) 
    GetBoundVar2DTime(FST_VAR, M, Y, nbRows, 3, bdgBoxLocal) 
    bdgBox = bdgBoxLocal 
  END IF
  RETURN TRUE 
END FUNCTION

origP2DTime = [0.0, 0.0]
speedP2DTime = [0.0, 0.0]
compP2DTime = [
  [1.0, 0.0],
  [0.0, 1.0]]
P2DTime = 
  Frame2DTimeCreateStatic(
    FrameCuboid, origP2DTime, speedP2DTime, compP2DTime)
origQ2DTime = [0.0,0.0]
speedQ2DTime = [0.0,0.0]
compQ2DTime = [
  [1.0, 0.0],
  [0.0, 1.0]]
Q2DTime = 
  Frame2DTimeCreateStatic(
    FrameCuboid, origQ2DTime, speedQ2DTime, compQ2DTime)
isIntersecting2DTime = 
  FMBTestIntersection2DTime(P2DTime, Q2DTime, bdgBox2DTimeLocal)
IF isIntersecting2DTime == TRUE
  PRINT "Intersection detected."
  Frame2DTimeExportBdgBox(Q2DTime, bdgBox2DTimeLocal, bdgBox2DTime)
  AABB2DTimePrint(bdgBox2DTime)
ELSE
  PRINT "No intersection."
END IF
