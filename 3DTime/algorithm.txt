FUNCTION Sgn(v)
  IF 0.0 < v
    a = 1
  ELSE
    a = 0
  END IF
  IF v < 0.0
    b = 1
  ELSE
    b = 0
  END IF
  RETURN A - B
END FUNCTION

FUNCTION Neg(x)
  IF x < 0.0
    RETURN x
  ELSE
    RETURN 0.0
  END IF
END FUNCTION

FST_VAR = 0
SND_VAR = 1
THD_VAR = 2
FOR_VAR = 3
EPSILON = 0.0000001

FUNCTION ElimVar3DTime(iVar, M, Y, nbRows, nbCols, Mp, Yp, nbRemainRows)
  nbRemainRows = 0
  FOR iRow = 0..(nbRows - 2)
    FOR jRow = (iRow + 1)..(nbRows - 1)
      IF Sgn(M[iRow][iVar]) <> sgn(M[jRow][iVar] AND 
         fabs(M[iRow][iVar]) > EPSILON AND 
         fabs(M[jRow][iVar]) > EPSILON:
        sumNegCoeff = 0.0
        jCol = 0
        FOR iCol = 0..(nbCols - 1)
          IF iCol <> iVar
            Mp*nbRemainRows][jCol] = 
              M[iRow][iCol] / fabs(M[iRow][iVar]) + 
              M[jRow][iCol] / fabs(M[jRow][iVar])
            sumNegCoeff += neg(Mp[nbRemainRows][jCol])
            jCol = jCol + 1
          END IF
        END FOR
        Yp[nbRemainRows] = 
          Y[iRow] / fabs(M[iRow][iVar]) +
          Y[jRow] / fabs(M[jRow][iVar])
        IF Yp[nbRemainRows] < sumNegCoeff - EPSILON
          RETURN TRUE
        END IF
        nbRemainRows = nbRemainRows + 1
      END IF
    END FOR
  END FOR
  FOR iRow = 0..(nbRows - 1)
    IF fabs(M[iRow][iVar]) < EPSILON
      jCol = 0
      FOR iCol = 0..(nbCols - 1)
        IF iCol <> iVar
          Mp[nbRemainRows][jCol] = M[iRow][iCol]
          jCol = jCol + 1
        END IF
      END FOR
      Yp[nbRemainRows] = Y[iRow]
      nbRemainRows = nbRemainRows + 1
    END IF
  END FOR
  RETURN FALSE
END FUNCTION

FUNCTION GetBound3DTime(iVar, M, Y, nbRows, bdgBox)
  bdgBox.min[iVar] = 0.0
  bdgBox.max[iVar] = 1.0
  FOR jRow = 0..(nbRows - 1)
    IF M[jRow][0] > EPSILON
      y = Y[jRow] / M[jRow][0]
      IF bdgBox.max[iVar] > y
        bdgBox.max[iVar] = y
      END IF
    ELSE IF M[jRow][0] < -EPSILON
      y = Y[jRow] / M[jRow][0]
      IF bdgBox.min[iVar] < y
        bdgBox.min[iVar] = y
      END IF
    END IF
  END FOR
END FUNCTION

FUNCTION FMBTestIntersection3DTime(that, tho, bdgBox)
  Frame3DTimeImportFrame(that, tho, thoProj)
  M[0][0] = -thoProj.comp[0][0] 
  M[0][1] = -thoProj.comp[1][0] 
  M[0][2] = -thoProj.comp[2][0] 
  M[0][3] = -thoProj.speed[0] 
  Y[0] = thoProj.orig[0] 
  IF (Y[0] < neg(M[0][0]) + neg(M[0][1]) + neg(M[0][2]) + neg(M[0][3]))
    RETURN FALSE
  END IF
  M[1][0] = -thoProj.comp[0][1] 
  M[1][1] = -thoProj.comp[1][1] 
  M[1][2] = -thoProj.comp[2][1] 
  M[1][3] = -thoProj.speed[1] 
  Y[1] = thoProj.orig[1] 
  IF Y[1] < neg(M[1][0]) + neg(M[1][1]) + neg(M[1][2]) + neg(M[1][3])
    RETURN FALSE
  END IF
  M[2][0] = -thoProj.comp[0][2] 
  M[2][1] = -thoProj.comp[1][2] 
  M[2][2] = -thoProj.comp[2][2] 
  M[2][3] = -thoProj.speed[2] 
  Y[2] = thoProj.orig[2] 
  IF (Y[2] < neg(M[2][0]) + neg(M[2][1]) + neg(M[2][2]) + neg(M[2][3]))
    RETURN FALSE 
  nbRows = 3 
  IF that.type == FrameCuboid
    M[nbRows][0] = thoProj.comp[0][0] 
    M[nbRows][1] = thoProj.comp[1][0] 
    M[nbRows][2] = thoProj.comp[2][0] 
    M[nbRows][3] = thoProj.speed[0] 
    Y[nbRows] = 1.0 - thoProj.orig[0] 
    IF Y[nbRows] < neg(M[nbRows][0]) + neg(M[nbRows][1]) + 
                   neg(M[nbRows][2]) + neg(M[nbRows][3])
      RETURN FALSE
    END IF
    nbRows = nbRows + 1
    M[nbRows][0] = thoProj.comp[0][1] 
    M[nbRows][1] = thoProj.comp[1][1] 
    M[nbRows][2] = thoProj.comp[2][1] 
    M[nbRows][3] = thoProj.speed[1] 
    Y[nbRows] = 1.0 - thoProj.orig[1] 
    IF Y[nbRows] < neg(M[nbRows][0]) + neg(M[nbRows][1]) + 
                   neg(M[nbRows][2]) + neg(M[nbRows][3])
      RETURN FALSE
    END IF
    nbRows = nbRows + 1
    M[nbRows][0] = thoProj.comp[0][2] 
    M[nbRows][1] = thoProj.comp[1][2] 
    M[nbRows][2] = thoProj.comp[2][2] 
    M[nbRows][3] = thoProj.speed[2] 
    Y[nbRows] = 1.0 - thoProj.orig[2] 
    IF Y[nbRows] < neg(M[nbRows][0]) + neg(M[nbRows][1]) + 
                   neg(M[nbRows][2]) + neg(M[nbRows][3])
      RETURN FALSE
    END IF
    nbRows = nbRows + 1
  ELSE
    M[nbRows][0] = 
      thoProj.comp[0][0] + thoProj.comp[0][1] + thoProj.comp[0][2] 
    M[nbRows][1] = 
      thoProj.comp[1][0] + thoProj.comp[1][1] + thoProj.comp[1][2] 
    M[nbRows][2] = 
      thoProj.comp[2][0] + thoProj.comp[2][1] + thoProj.comp[2][2] 
    M[nbRows][3] = thoProj.speed[0] + thoProj.speed[1] + thoProj.speed[2] 
    Y[nbRows] = 1.0 - thoProj.orig[0] - thoProj.orig[1] - thoProj.orig[2] 
    IF Y[nbRows] < neg(M[nbRows][0]) + neg(M[nbRows][1]) + 
                   neg(M[nbRows][2]) + neg(M[nbRows][3])
      RETURN FALSE
    END IF
    nbRows = nbRows + 1
  END IF
  IF tho.type == FrameCuboid
    M[nbRows][0] = 1.0 
    M[nbRows][1] = 0.0 
    M[nbRows][2] = 0.0 
    M[nbRows][3] = 0.0 
    Y[nbRows] = 1.0 
    nbRows = nbRows + 1
    M[nbRows][0] = 0.0 
    M[nbRows][1] = 1.0 
    M[nbRows][2] = 0.0 
    M[nbRows][3] = 0.0 
    Y[nbRows] = 1.0 
    nbRows = nbRows + 1
    M[nbRows][0] = 0.0 
    M[nbRows][1] = 0.0 
    M[nbRows][2] = 1.0 
    M[nbRows][3] = 0.0 
    Y[nbRows] = 1.0 
    nbRows = nbRows + 1
  ELSE
    M[nbRows][0] = 1.0 
    M[nbRows][1] = 1.0 
    M[nbRows][2] = 1.0 
    M[nbRows][3] = 0.0 
    Y[nbRows] = 1.0 
    nbRows = nbRows + 1
  END IF
  M[nbRows][0] = -1.0 
  M[nbRows][1] = 0.0 
  M[nbRows][2] = 0.0 
  M[nbRows][3] = 0.0 
  Y[nbRows] = 0.0 
  nbRows = nbRows + 1
  M[nbRows][0] = 0.0 
  M[nbRows][1] = -1.0 
  M[nbRows][2] = 0.0 
  M[nbRows][3] = 0.0 
  Y[nbRows] = 0.0 
  nbRows = nbRows + 1
  M[nbRows][0] = 0.0 
  M[nbRows][1] = 0.0 
  M[nbRows][2] = -1.0 
  M[nbRows][3] = 0.0 
  Y[nbRows] = 0.0 
  nbRows = nbRows + 1
  M[nbRows][0] = 0.0 
  M[nbRows][1] = 0.0 
  M[nbRows][2] = 0.0 
  M[nbRows][3] = 1.0 
  Y[nbRows] = 1.0 
  nbRows = nbRows + 1
  M[nbRows][0] = 0.0 
  M[nbRows][1] = 0.0 
  M[nbRows][2] = 0.0 
  M[nbRows][3] = -1.0 
  Y[nbRows] = 0.0 
  nbRows = nbRows + 1
  inconsistency = 
    ElimVar3DTime(FST_VAR, M, Y, nbRows, 4, Mp, Yp, nbRowsP) 
  IF inconsistency == TRUE
    RETURN FALSE
  END IF
  inconsistency = 
    ElimVar3DTime(FST_VAR, Mp, Yp, nbRowsP, 3, Mpp, Ypp, nbRowsPP) 
  IF inconsistency == TRUE
    RETURN FALSE
  END IF
  inconsistency = 
    ElimVar3DTime(FST_VAR, Mpp, Ypp, nbRowsPP, 2, Mppp, Yppp, nbRowsPPP) 
  IF inconsistency == TRUE
    RETURN FALSE
  END IF
  GetBound3DTime(FOR_VAR, Mppp, Yppp, nbRowsPPP, bdgBoxLocal) 
  IF bdgBoxLocal.min[FOR_VAR] >= bdgBoxLocal.max[FOR_VAR]
    RETURN FALSE 
  END IF
  ElimVar3DTime(SND_VAR, Mpp, Ypp, nbRowsPP, 2, Mppp, Yppp, nbRowsPPP) 
  GetBound3DTime(THD_VAR, Mppp, Yppp, nbRowsPPP, bdgBoxLocal) 
  ElimVar3DTime(FOR_VAR, M, Y, nbRows, 4, Mp, Yp, nbRowsP) 
  ElimVar3DTime(THD_VAR, Mp, Yp, nbRowsP, 3, Mpp, Ypp, nbRowsPP) 
  ElimVar3DTime(SND_VAR, Mpp, Ypp, nbRowsPP, 2, Mppp, Yppp, nbRowsPPP) 
  GetBound3DTime(FST_VAR, Mppp, Yppp, nbRowsPPP, bdgBoxLocal) 
  ElimVar3DTime(FST_VAR, Mpp, Ypp, nbRowsPP, 2, Mppp, Yppp, nbRowsPPP) 
  GetBound3DTime(SND_VAR, Mppp, Yppp, nbRowsPPP, bdgBoxLocal) 
  bdgBox = bdgBoxLocal 
  RETURN TRUE 
END FUNCTION

origP3DTime = [0.0, 0.0, 0.0]
speedP3DTime = [0.0, 0.0, 0.0]
compP3DTime = [
  [1.0, 0.0, 0.0],
  [0.0, 1.0, 0.0],
  [0.0, 0.0, 1.0]]
P3DTime = 
  Frame3DTimeCreateStatic(
    FrameCuboid, origP3DTime, speedP3DTime, compP3DTime)
origQ3DTime = [0.0, 0.0, 0.0]
speedQ3DTime = [0.0, 0.0, 0.0]
compQ3DTime = [
  [1.0, 0.0, 0.0],
  [0.0, 1.0, 0.0],
  [0.0, 0.0, 1.0]]
Q3DTime = 
  Frame3DTimeCreateStatic(
    FrameCuboid, origQ3DTime, speedQ3DTime, compQ3DTime)
isIntersecting3DTime = 
  FMBTestIntersection3DTime(P3DTime, Q3DTime, bdgBox3DTimeLocal)
IF isIntersecting3DTime
  PRINT "Intersection detected in AABB "
  Frame3DTimeExportBdgBox(Q3DTime, bdgBox3DTimeLocal, bdgBox3DTime)
  AABB3DTimePrint(bdgBox3DTime)
ELSE
  PRINT "No intersection."
END IF
