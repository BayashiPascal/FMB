ENUM FrameType
  FrameCuboid,
  FrameTetrahedron
END ENUM

STRUCT AABB2D
  // x,y
  real min[2]
  real max[2]
END STRUCT

STRUCT Frame2D
  FrameType type
  real orig[2]
  // comp[iComp][iAxis]
  real comp[2][2]
  AABB2D bdgBox
  real invComp[2][2]
END STRUCT

FUNCTION powi(base, exp)
    res = 1 
    FOR i=0..(exp - 1)
      res = res * base  
    END FOR
    RETURN res 
END FUNCTION

FUNCTION Frame2DPrint(that)
  IF that.type == FrameTetrahedron
    PRINT "T" 
  ELSE IF that.type == FrameCuboid
    PRINT "C" 
  END IF
  PRINT "o(" 
  FOR i = 0..1
    PRINT that.orig[i]
    IF i < 1
      PRINT "," 
    END IF
  END FOR
  comp = ['x','y']
  FOR j = 0..1
    PRINT ") " comp[j] "(" 
    FOR i = 0..1
      PRINT that.comp[j][i]
      IF i < 1
        PRINT "," 
      END IF
    END FOR
  END FOR
  PRINT ")" 
END FUNCTION

FUNCTION AABB2DPrint(that)
  PRINT "minXY(" 
  FOR i = 0..1
    PRINT that.min[i]
    IF i < 1
      PRINT "," 
    END IF
  END FOR
  PRINT ")-maxXY(" 
  FOR i = 0..1
    PRINT that.max[i]
    IF i < 1
      PRINT "," 
    END IF
  END FOR
  PRINT ")" 
END FUNCTION

FUNCTION Frame2DExportBdgBox(that, bdgBox, bdgBoxProj)
  FOR i = 0..1
    bdgBoxProj.max[i] = that.orig[i]
    FOR j = 0..1
      bdgBoxProj.max[i] = 
        bdgBoxProj.max[i] + that.comp[j][i] * bdgBox.min[j] 
    END FOR
    bdgBoxProj.min[i] = bdgBoxProj.max[i] 
  END FOR
  nbVertices = powi(2, 2) 
  FOR iVertex = 1..(nbVertices - 1) 
    FOR i = 0..1
      IF (iVertex & (1 << i)) == TRUE
        v[i] = bdgBox.max[i]
      ELSE
        v[i] = bdgBox.min[i]
      END IF
    END FOR
    FOR i = 0..1
      w[i] = that.orig[i] 
      FOR j = 0..1
        w[i] = w[i] + that.comp[j][i] * v[j] 
      END FOR
    END FOR
    FOR i = 0..1
      IF bdgBoxProj.min[i] > w[i]
        bdgBoxProj.min[i] = w[i] 
      END IF
      IF bdgBoxProj.max[i] < w[i]
        bdgBoxProj.max[i] = w[i] 
      END IF
    END FOR
  END FOR
END FUNCTION

FUNCTION Frame2DImportFrame(P, Q, Qp)
  FOR i = 0..1
    v[i] = Q.orig[i] - P.orig[i] 
  END FOR
  FOR i = 0..1
    Qp.orig[i] = 0.0 
    FOR j = 0..1
      Qp.orig[i] = Qp.orig[i] + P.invComp[j][i] * v[j] 
      Qp.comp[j][i] = 0.0 
      FOR k = 0..1
        Qp.comp[j][i] = Qp.comp[j][i] + P.invComp[k][i] * Q.comp[j][k] 
      END FOR
    END FOR
  END FOR
END FUNCTION

FUNCTION Frame2DUpdateInv(that)
  det = that.comp[0][0] * that.comp[1][1] - 
    that.comp[1][0] * that.comp[0][1] 
  that.invComp[0][0] = that.comp[1][1] / det 
  that.invComp[0][1] = -that.comp[0][1] / det 
  that.invComp[1][0] = -that.comp[1][0] / det 
  that.invComp[1][1] = that.comp[0][0] / det 
END FUNCTION

FUNCTION Frame2DCreateStatic(type, orig, comp)
  that.type = type 
  FOR iAxis = 0..1
    that.orig[iAxis] = orig[iAxis] 
    FOR iComp = 0..1
      that.comp[iComp][iAxis] = comp[iComp][iAxis] 
    END FOR
  END FOR
  FOR iAxis = 0..1
    min = orig[iAxis] 
    max = orig[iAxis] 
    FOR iComp = 0..1
      IF that.type == FrameCuboid
        IF that.comp[iComp][iAxis] < 0.0
          min += that.comp[iComp][iAxis] 
        END IF
        IF that.comp[iComp][iAxis] > 0.0
          max += that.comp[iComp][iAxis] 
        END IF
      ELSE IF that.type == FrameTetrahedron
        IF that.comp[iComp][iAxis] < 0.0 AND
          min > orig[iAxis] + that.comp[iComp][iAxis]
          min = orig[iAxis] + that.comp[iComp][iAxis] 
        END IF
        IF that.comp[iComp][iAxis] > 0.0 AND
          max < orig[iAxis] + that.comp[iComp][iAxis]
          max = orig[iAxis] + that.comp[iComp][iAxis] 
        END IF
      END IF
    END FOR
    that.bdgBox.min[iAxis] = min 
    that.bdgBox.max[iAxis] = max 
  END FOR
  Frame2DUpdateInv(that) 
  RETURN that 
END FUNCTION

FUNCTION Sgn(v)
  IF 0.0 < v
    a = 1
  ELSE
    a = 0
  END IF
  IF v < 0.0
    b = 1
  ELSE
    b = 0
  END IF
  RETURN A - B
END FUNCTION

FUNCTION Neg(x)
  IF x < 0.0
    RETURN x
  ELSE
    RETURN 0.0
  END IF
END FUNCTION

FST_VAR = 0
SND_VAR = 1

FUNCTION ElimVar2D(iVar, M, Y, nbRows, nbCols, Mp, Yp, nbRemainRows)
  nbRemainRows = 0 
  FOR iRow = 0..(nbRows - 2)
    FOR jRow = (iRow + 1)..(nbRows - 1)
      IF sgn(M[iRow][iVar]) <> sgn(M[jRow][iVar]) AND 
          M[iRow][iVar] <> 0.0 AND 
          M[jRow][iVar] <> 0.0
        sumNegCoeff = 0.0 
        jCol = 0
        FOR iCol = 0..(nbCols - 1)
          IF iCol <> iVar
            Mp[nbRemainRows][jCol] = 
              M[iRow][iCol] / fabs(M[iRow][iVar]) + 
              M[jRow][iCol] / fabs(M[jRow][iVar]) 
            sumNegCoeff += neg(Mp[nbRemainRows][jCol]) 
            jCol = jcol + 1 
          END IF
        END FOR
        Yp[nbRemainRows] = 
          Y[iRow] / fabs(M[iRow][iVar]) +
          Y[jRow] / fabs(M[jRow][iVar]) 
        IF Yp[nbRemainRows] < sumNegCoeff
          RETURN TRUE 
        END IF
        nbRemainRows = nbRemainRows + 1 
      END IF
    END FOR
  END FOR
  FOR iRow = 0..(nbRows - 1)
    IF M[iRow][iVar] == 0.0
      jCol = 0
      FOR iCol = 0..(nbCols - 1)
        IF iCol <> iVar
          Mp[nbRemainRows][jCol] = M[iRow][iCol] 
          jCol = jCol + 1
        END IF
      END FOR
      Yp[nbRemainRows] = Y[iRow] 
      nbRemainRows = nbRemainRows + 1 
    END IF
  END FOR
  RETURN FALSE 
END FUNCTION

FUNCTION GetBound2D(iVar, M, Y, nbRows, bdgBox)
  bdgBox.min[iVar] = 0.0 
  bdgBox.max[iVar] = 1.0 
  FOR jRow = 0..(nbRows - 1)
    IF M[jRow][0] > 0.0
      y = Y[jRow] / M[jRow][0] 
      IF bdgBox.max[iVar] > y
        bdgBox.max[iVar] = y 
      END IF
    ELSE IF M[jRow][0] < 0.0
      y = Y[jRow] / M[jRow][0] 
      IF bdgBox.min[iVar] < y
        bdgBox.min[iVar] = y 
      END IF
    END IF
  END FOR
END FUNCTION

FUNCTION FMBTestIntersection2D(that, tho, bdgBox)
  Frame2DImportFrame(that, tho, &thoProj) 
  M[0][0] = -thoProj.comp[0][0] 
  M[0][1] = -thoProj.comp[1][0] 
  Y[0] = thoProj.orig[0] 
  IF Y[0] < neg(M[0][0]) + neg(M[0][1])
    RETURN FALSE 
  END IF
  M[1][0] = -thoProj.comp[0][1] 
  M[1][1] = -thoProj.comp[1][1] 
  Y[1] = thoProj.orig[1] 
  IF Y[1] < neg(M[1][0]) + neg(M[1][1])
    RETURN FALSE 
  END IF
  M[2][0] = -1.0 
  M[2][1] = 0.0 
  Y[2] = 0.0 
  M[3][0] = 0.0 
  M[3][1] = -1.0 
  Y[3] = 0.0 
  nbRows = 4 
  IF that.type == FrameCuboid
    M[nbRows][0] = thoProj.comp[0][0] 
    M[nbRows][1] = thoProj.comp[1][0] 
    Y[nbRows] = 1.0 - thoProj.orig[0] 
    IF Y[nbRows] < neg(M[nbRows][0]) + neg(M[nbRows][1])
      RETURN FALSE 
    END IF
    nbRows = nbRows + 1
    M[nbRows][0] = thoProj.comp[0][1] 
    M[nbRows][1] = thoProj.comp[1][1] 
    Y[nbRows] = 1.0 - thoProj.orig[1] 
    IF Y[nbRows] < neg(M[nbRows][0]) + neg(M[nbRows][1])
      RETURN FALSE 
    END IF
    nbRows = nbRows + 1
  ELSE
    M[nbRows][0] = thoProj.comp[0][0] + thoProj.comp[0][1] 
    M[nbRows][1] = thoProj.comp[1][0] + thoProj.comp[1][1] 
    Y[nbRows] = 1.0 - thoProj.orig[0] - thoProj.orig[1] 
    IF Y[nbRows] < neg(M[nbRows][0]) + neg(M[nbRows][1])
      RETURN FALSE 
    END IF
    nbRows = nbRows + 1
  END
  IF tho.type == FrameCuboid
    M[nbRows][0] = 1.0 
    M[nbRows][1] = 0.0 
    Y[nbRows] = 1.0 
    nbRows = nbRows + 1
    M[nbRows][0] = 0.0 
    M[nbRows][1] = 1.0 
    Y[nbRows] = 1.0 
    nbRows = nbRows + 1
  ELSE
    M[nbRows][0] = 1.0 
    M[nbRows][1] = 1.0 
    Y[nbRows] = 1.0 
    nbRows = nbRows + 1
  END
  inconsistency = ElimVar2D(FST_VAR, M, Y, nbRows, 2, Mp, Yp, nbRowsP) 
  IF inconsistency == TRUE
    RETURN FALSE 
  END
  GetBound2D(SND_VAR, Mp, Yp, nbRowsP, bdgBoxLocal) 
  IF bdgBoxLocal.min[SND_VAR] >= bdgBoxLocal.max[SND_VAR]
    RETURN FALSE 
  END
  ElimVar2D(SND_VAR, M, Y, nbRows, 2, Mp, Yp, nbRowsP) 
  GetBound2D(FST_VAR, Mp, Yp, nbRowsP, bdgBoxLocal) 
  bdgBox = bdgBoxLocal 
  RETURN TRUE 
END

origP2D = [0.0, 0.0]
compP2D = [
  [1.0, 0.0],
  [0.0, 1.0]]
P2D = Frame2DCreateStatic(FrameCuboid, origP2D, compP2D)
origQ2D = [0.0, 0.0]
compQ2D = [
  [1.0, 0.0],
  [0.0, 1.0]]
Q2D = Frame2DCreateStatic(FrameCuboid, origQ2D, compQ2D)
isIntersecting2D = FMBTestIntersection2D(P2D, Q2D, bdgBox2DLocal)
if isIntersecting2D == TRUE
  PRINT "Intersection detected."
  Frame2DExportBdgBox(Q2D, bdgBox2DLocal, bdgBox2D);
  AABB2DPrint(bdgBox2D)
ELSE
  PRINT "No intersection."
END IF
